package com.har.journey.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.har.journey.model.Product;

public interface ProductRepository extends JpaRepository<Product, Integer> {

	// Syntax (Base):  RT  findBy<Condition>(<DataType> <paramName>);
	
	
	//---------------------#1. Basic -----------------------------------------------
	//(Equal,GreaterThan,GreaterThanEqual,LessThan,LessThanEqual,Between,is Null,is Not Null)-----
	
	
	   //SYNTAX :   RT  findBy<VariableName>(<DataType> <paramName>);
	  //SQL : SELECT * FROM PRODUCT WHERE PRO_VENDOR=?
	  List<Product> findByProdVendor(String prodVendor);
	  
	  
	  //SQL : SELECT * FROM PRODUCT WHERE PRO_NAME=?
	  List<Product> findByProdName(String prodName);
	
	
	  //SQL : SELECT * FROM PRODUCT WHERE PRO_GRADE=?
	  List<Product> findByProdGradeIs(String prodGrade);           // Two are equals
	  List<Product> findByProdGradeEquals(String prodGrade);       //    
	  
	  
	  //SQL : SELECT * FROM PRODUCT WHERE PRO_COST>?
	  List<Product> findByProdCostGreaterThan(Double prodCost); 
	  
	  
	  //SQL : SELECT * FROM PRODUCT WHERE PRO_COST<=?
	  List<Product> findByProdCostLessThanEqual(Double prodCost);  
	
	  //SQL : SELECT * FROM PRODUCT WHERE PRO_COST BETWEEN ? and ?
	  List<Product> findByProdCostBetween(Double prodCostA,Double prodCostB);  
	  
	  
	//---------------------#2. Like Operator -----------------------------------------------
	//(Like ,Not Like,StartingWith,EndingWith,Containing)
	  
	//SQL : SELECT * FROM PRODUCT WHERE PRO_NAME LIKE ?
	List<Product> findByProdNameLike(String prodNameExpession); // prodNameExpession : Here we can pass prodName expression like 'A%' ,'%A','%A%'
	 
	//SQL : SELECT * FROM PRODUCT WHERE PRO_NAME NOT LIKE ?
	List<Product> findByProdNameNotLike(String prodNameExpession);
	
	//---StartingWith with is equals to <input>% [Generated by Data JPA] 	
	List<Product> findByProdNameStartingWith(String prodName); 
	
	//---EndingWith with is equals to %<input> [Generated by Data JPA] 	
	List<Product> findByProdNameEndingWith(String prodName);  
	  
	//---Containing with is equals to %<input>% [Generated by Data JPA] 	
	List<Product> findByProdNameContaining(String prodName);  
	
	  
	  
	//---------------------#3. And ,Or,In Operators -----------------------------------------------
	//Syntax : findBy<VariableWithConditions>And/Or<VariableWithConditions>(<Params>);
	
	// SQL: SELECT * FROM PRODUCT WHERE PROD_NAME LIKE ? AND PROD_COST>=?
	List<Product> findByProdNameLikeAndProdCostGreaterThanEqual(String prodName,Double prodCost);
	
	// SQL: SELECT * FROM PRODUCT WHERE PROD_NAME LIKE ? AND PROD_COST<?
	List<Product> findByProdNameLikeOrProdCostLessThan(String prodName,Double prodCost);
	
	// SQL: SELECT * FROM PRODUCT WHERE PROD_NAME In (?)
	List<Product> findByProdNameIn(List<String> prodName);
	
	//---------------------#4. Order by  -----------------------------------------------
	//Syntax : findBy<VariableWithConditions>OrderBy<Variable>Asc/Desc(<Params>);
	//SQL:  SELECT * FROM PRODUCT WHERE prod_name=? order by prod_vendor ASC
	List<Product> findByProdNameOrderByProdVendor(String prodName);

	//SQL:  SELECT * FROM PRODUCT WHERE prod_name=? order by prod_vendor desc
	List<Product> findByProdNameOrderByProdVendorDesc(String prodName);
	

	//---------------------#5. IgnoreCase  -----------------------------------------------
	// SQL: SELECT * FROM PRODUCT WHERE  upper(p1_0.prod_name)=upper(?)
	List<Product> findByProdNameIgnoreCase(String prodName);

	  
	// # Projection
	/** Steps to define Projections
	 * 
	 * i)Define one Interface with any Name inside repository
	 *   
	 *   interface MyView{
	 *   }
	 *   
	 * ii)Define abstract methods (looks like get_() methdo syntax ) using varaibles
	 *      <DataType> get<Variable>();
	 *      
	 * iii) Use this interface as ReturnType for findBy method    
	
	 */
	
	interface MyView{
		String getProdVendor();
		String getProdName();
		
	}
	//SQL : SELECT prodName,prodVendor from Product where prodGrade=?
	List<MyView> findByProdGrade(String prodGrade);
	
	
	  //Please refer findBy.jpg image for more information
}
