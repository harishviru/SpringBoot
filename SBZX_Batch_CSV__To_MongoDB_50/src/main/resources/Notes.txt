
		       ---------------------------------------------
			Spring Boot : Batch Processing
                       --------------------------------------------

*)Add Depenency : Batch, H2 For Repository (To store batch processing details).
*) Reader reads data from Source as line by line, until it returns null.
   [Null indicates no more data to read].

*) BatchStatus is a enum that has possible values:
  COMPLETED, STARTING, STARTED, STOPPING, STOPPED, FAILED, ABANDONED, UNKNOWN;

---Coding Order-------
1. Reader class
2. Processor class
3. Writer class
4. Listener class
5. BatchConfig class(** File name - any name)
 a. Reader Object
 b. Procesor Object
 c. Writer Object
 d. Listener Object
 f. StepBuilderFactory Autowired
 g. Step object
 h. JobBuilderFactory Autowired
 i. Job Object

6. JobRunner class

*) On Starting Application, Spring Boot is executing batch processing one time 
   and after executing Runner class batch processing executed one time.
   ie total 2 times.

*) To avoid above process add below key in properties file
   # Do not execute batch on startup
   spring.batch.job.enabled=false
   ---------------------------------------------------------------------------------------------
   			Date: 08/01/2021
			Spring Boot 7AM
			  Mr. RAGHU
	-------------------------------------------
	  Spring Boot Batch : MySQL -> CSV File

*) RowMapper<T> :- 
=> It is a functional Interface, given by JDBC API(Spring Boot).
=> This is used to convert ResultSet data into Object format.
=> It is having mapRow() method. It takes one Row from ResultSet
   and converts into one Given Type Object(<T>) Ex: Employee,...etc

--Using Impl class-------
package in.nareshit.raghu;
//ctrl+shift+O
public class UserRowMapper implements RowMapper<User> {

	@Override
	public User mapRow(ResultSet rs, int rowNum) 
			throws SQLException {
		
		User user = new User();
		user.setUid(rs.getInt("uid"));
		user.setUname(rs.getString("uname"));
		user.setUrole(rs.getString("urole"));
		user.setUtype(rs.getString("utype"));
		
		return user;
	}
}


---Using Anonymous Code---
new Interface<Generic> () {
  //override all abstract methods
}

new RowMapper<User>() {

	@Override
	public User mapRow(ResultSet rs, int rowNum) 
			throws SQLException {
		
		User user = new User();
		user.setUid(rs.getInt("uid"));
		user.setUname(rs.getString("uname"));
		user.setUrole(rs.getString("urole"));
		user.setUtype(rs.getString("utype"));
		
		return user;
	}
}



---Using Lambda Expression--
Interface ob = (methodParams) -> { method body };

RowMapper<User> ob = (rs,rowNum) -> {
				
	User user = new User();
	user.setUid(rs.getInt("uid"));
	user.setUname(rs.getString("uname"));
	user.setUrole(rs.getString("urole"));
	user.setUtype(rs.getString("utype"));
	return user;
}

--Short Format--
RowMapper<User> ob = (rs,rowNum) ->  new User(
			rs.getInt("uid"),
			rs.getString("uname"),
			rs.getString("urole"),
			rs.getString("utype"));

----------------------------------
*) JdbcCursorItemReader<T> is fetching data from Database by using
   one SQL (SELECT Query) and data is provided in ResutlSet<T> Format.
   Now RowMapper<T> is converting data into Object Format and same objects
   are given to Processor code.
   

*) Resource: File + Location (Spring Application)
  3 places : 
     i. under the project (src/main/resource --- classpath)
    ii. inside system drive (D:/abcd, E:/xyz/. -- FileSystem)
   iii. Inside Internet/server location (http://localhost:9898/app/one.txt)
             (Url Resource)

Resource r1 = new ClassPathResource("products.csv");

Resource r2 = new FileSystemResource("F:/abcd/mno.csv");

Resource r3 = new UrlResource("http://localhost:9898/myapp/one.csv");

-------------API Details-------------------------------------------
class FlatFileItemWriter<T> {
  void setResource(Resource r);
  void setLineAggregator(LineAggregator<T> lineAggregator) { }
}

interface LineAggregator<T> { }

class DelimitedLineAggregator<T> implements LineAggregator<T> {
   void setDelimiter(String delimiter) { }
   void setFieldExtractor(FieldExtractor<T> fieldExtractor) { }
}

interface FieldExtractor<T> { }
class BeanWrapperFieldExtractor<T> implements FieldExtractor<T> {
  void setNames(String[] names) {}
}

--using code--
FlatFileItemWriter<User> writer = new FlatFileItemWriter<>();
writer.setLineAggregator(new DelimitedLineAggregator<User>(){{ 
	setDelimiter(",");
        setFieldExtractor(new BeanWrapperFieldExtractor<User>(){{
		setNames(new String[]{ "a","b","c"})
	}});
}});
-------------
*) LineAggregator<T> : This is interface given by Spring Boot Batch.
   It creates one Line in a File using One object.
   ie Object ---> One Line in File.

   Line required a format : variable, variable, variable, ...
   ie Delimeter is Comma(,) Symbol. variable are taken from Object
   (Fields --instance variables).

____________________________________________________________________
*)Task Batch Config : File to MySQL using JPA

a) Add Spring Data JPA Dependency in pom.xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

b) inside application.properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot7am
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect


c) Remove code for DataSource Bean and ItemWriter Bean

d) Autowire EntityManagerFactory inside BatchConfig

@Autowired
private EntityManagerFactory entityManagerFactory;

e) Define ItemWriter as

@Bean
public ItemWriter<Product> writer() {
   JpaItemWriter<Product> writer = new JpaItemWriter<Product>();
   writer.setEntityManagerFactory(entityManagerFactory);
   return writer;
}

f) At Model class apply @Entity and @Id
package in.nareshit.raghu.model;

import javax.persistence.Entity;
import javax.persistence.Id;

import lombok.Data;

@Data
@Entity
public class Product {
	@Id
	private Integer prodId;
	private String prodCode;
	private Double prodCost;
	private Double prodDis;
	private Double prodGst;
	
}
____________________________________________________________